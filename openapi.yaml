openapi: 3.0.0
info:
  version: 1.0.0
  title: proof-verification-relayer
  description: ''
servers:
  - url: 'https://api.demo.tokend.io'
    description: TokenD Developer Environment
paths:
  /integrations/proof-verification-relayer/v1/state:
    get:
      tags:
        - State
      summary: Get signed root state
      description: |
        Endpoint to get transited root state.    
        The service listens for the new `RootUpdated` event and fetches them. By request it might return any root by 
        its block number or root hex string if none of them provided last signed root returned.   
        Response contain signature of root signed by relayer private key.
      operationId: GetState
      parameters:
        - in: query
          name: 'filter[block]'
          required: false
          description: Block number to filter root by
          example: '666'
          schema:
            type: integer
            format: int64
        - in: query
          name: 'filter[root]'
          required: false
          description: Transited root in hex format stated to filter root by.
          example: '0x234693c352a217d95c3a0e2e7ea17a340ac1b2290e9ab573ef97c2a86b1a5a6e'
          schema:
            type: string
            pattern: '^0x([0-9a-fA-F]+)$'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/State'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /integrations/proof-verification-relayer/v1/transit-state:
    post:
      tags:
        - State
      summary: Transit state
      operationId: TransitState
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - tx_data
                  properties:
                    tx_data:
                      type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Tx'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /integrations/proof-verification-relayer/v1/verify-proof:
    post:
      tags:
        - Proofs
      summary: The proof verification
      operationId: verify-proof
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - tx_data
                  properties:
                    tx_data:
                      type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Tx'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /integrations/proof-verification-relayer/v1/vote:
    post:
      tags:
        - Votes
      summary: The voting
      operationId: vote
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - tx_data
                    - voting
                    - registration
                  properties:
                    tx_data:
                      type: string
                    voting:
                      type: string
                    registration:
                      type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Tx'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  '/integrations/proof-verification-relayer/v2/count-remaining-votes/{voting_id}':
    get:
      tags:
        - Voting Info
      summary: Get predicted number of votes for an ID
      operationId: getVotePrediction
      parameters:
        - $ref: '#/components/parameters/votingIdParam'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/VoteCount'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
  '/integrations/proof-verification-relayer/v2/is-enough/{voting_id}':
    get:
      tags:
        - Voting Info
      summary: Retrieve the predicted voting availability for a given ID
      operationId: checkVotingAvailability
      parameters:
        - $ref: '#/components/parameters/votingIdParam'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/VotingAvailability'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
  /integrations/proof-verification-relayer/v2/predict:
    post:
      tags:
        - Voting Info
      summary: Prediction of voting parameters (number of transactions or required amount)
      description: 'This endpoint allows predicting voting parameters. The user can provide a voting ID and select one of the prediction types: forecasting the required amount for a given number of transactions or estimating the possible number of transactions with a specified amount'
      operationId: votingPredict
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/VotingPredict'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VotingPredictResp'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
  /integrations/proof-verification-relayer/v2/proposals:
    get:
      tags:
        - Voting Info
      summary: Get proposal info array
      description: 'This endpoint returns details about the proposals, including its current status, configuration, options.'
      operationId: proposalInfo
      parameters:
        - $ref: '#/components/parameters/proposalCreatorParam'
        - $ref: '#/components/parameters/citizenshipParam'
        - $ref: '#/components/parameters/MaxAgeParam'
        - $ref: '#/components/parameters/MinAgeParam'
        - $ref: '#/components/parameters/proposalIDParam'
        - $ref: '#/components/parameters/sexParam'
        - $ref: '#/components/parameters/votingStatus'
        - $ref: '#/components/parameters/pageLimitParam'
        - $ref: '#/components/parameters/sortingParam'
        - $ref: '#/components/parameters/pageNumberParam'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProposalInfo'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
  /integrations/proof-verification-relayer/v2/state:
    get:
      tags:
        - State
      summary: Get signed root state V2
      description: |
        Endpoint to get transited root state.    
        The service listens for the new `RootUpdated` event and fetches them. By request it might return any root by 
        its block number or root hex string if none of them provided last signed root returned.   
        Response contain signature of root signed by relayer private key, with the last byte of the signature set to 27/28.
      operationId: GetStateV2
      parameters:
        - in: query
          name: 'filter[block]'
          required: false
          description: Block number to filter root by
          example: '666'
          schema:
            type: integer
            format: int64
        - in: query
          name: 'filter[root]'
          required: false
          description: Transited root in hex format stated to filter root by.
          example: '0x234693c352a217d95c3a0e2e7ea17a340ac1b2290e9ab573ef97c2a86b1a5a6e'
          schema:
            type: string
            pattern: '^0x([0-9a-fA-F]+)$'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/StateV2'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /integrations/proof-verification-relayer/v2/vote:
    post:
      tags:
        - Votes V2
      summary: Voting V2
      operationId: vote_v2
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/SendTx'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/TxKey'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
components:
  schemas:
    BadRequestError:
      type: object
      required:
        - title
        - status
      properties:
        title:
          type: string
          example: Bad Request
        status:
          type: string
          enum:
            - '400'
    Errors:
      description: 'Standard JSON:API error'
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          description: Non empty array of errors occurred during request processing
          items:
            type: object
            required:
              - title
              - status
            properties:
              title:
                type: string
                description: 'Title is a short, human-readable summary of the problem'
                example: Bad Request
              detail:
                type: string
                description: Detail is a human-readable explanation specific to this occurrence of the problem
                example: Request body was expected
              status:
                type: integer
                description: Status is the HTTP status code applicable to this problem
                example: 400
                enum:
                  - 400
                  - 401
                  - 403
                  - 404
                  - 409
                  - 429
                  - 500
    ForbiddenError:
      type: object
      required:
        - title
        - status
      properties:
        title:
          type: string
          example: Forbidden
        status:
          type: string
          enum:
            - '403'
    InternalError:
      type: object
      required:
        - title
        - status
      properties:
        title:
          type: string
          example: Internal Error
        status:
          type: string
          enum:
            - '500'
    NotFoundError:
      type: object
      required:
        - title
        - status
      properties:
        title:
          type: string
          example: Not Found
        status:
          type: string
          enum:
            - '404'
    ParsedWhiteListDataWithMetadata:
      type: object
      required:
        - metadata
        - parsed_voting_whitelist_data
      properties:
        metadata:
          $ref: '#/components/schemas/ProposalInfoAttributesMetadata'
        parsed_voting_whitelist_data:
          type: array
          items:
            $ref: '#/components/schemas/ParsedVotingWhiteData'
    ProposalInfo:
      allOf:
        - $ref: '#/components/schemas/ProposalInfoKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              $ref: '#/components/schemas/ProposalInfoAttributes'
    ProposalInfoAttributes:
      type: object
      required:
        - status
        - owner
        - metadata
        - total_balance
        - remaining_balance
        - start_timestamp
        - end_timestamp
        - votes_count
        - remaining_votes_count
      properties:
        status:
          type: string
          enum:
            - waiting
            - started
            - ended
        owner:
          type: string
          description: Address creator of the proposal
        metadata:
          $ref: '#/components/schemas/ProposalInfoAttributesMetadata'
        total_balance:
          type: string
          description: Balance what is the starting balance with deposits
        remaining_balance:
          type: string
          description: Remaining balance
        start_timestamp:
          type: integer
          format: int64
          description: Start time of the proposal
        end_timestamp:
          type: integer
          format: int64
          description: End time of the proposal
        votes_count:
          type: integer
          format: int64
          description: Total number of votes already cast for this proposal
        remaining_votes_count:
          type: integer
          format: int64
          description: Total number of available votes for this proposal
    ProposalInfoAttributesMetadata:
      type: object
      description: Additional proposal data stored on IPFS
      required:
        - title
        - description
        - acceptedOptions
        - imageCID
      properties:
        title:
          type: string
          description: Title of the proposal
        description:
          type: string
          description: Detailed description of the proposal
        acceptedOptions:
          type: array
          items:
            $ref: '#/components/schemas/Options'
        imageCID:
          type: string
          description: Proposal image CID
    ProposalInfoKey:
      type: object
      required:
        - id
        - type
      properties:
        type:
          type: string
          enum:
            - proposals
        id:
          type: string
          description: Proposal ID
    SendTx:
      allOf:
        - $ref: '#/components/schemas/SendTxKey'
        - type: object
          x-go-is-request: true
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - tx_data
                - destination
              properties:
                tx_data:
                  type: string
                  pattern: '^0x[0-9a-fA-F]+$'
                  example: '0xdeadbeafdeadbeafdeadbeaf'
                  description: Serialized transaction data
                destination:
                  type: string
                  pattern: '^0x[0-9a-fA-F]{40}'
                  example: 0xdead...beaf
                  description: Address of the contract to which the transaction data should be sent
    SendTxKey:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - send_transaction
    State:
      allOf:
        - $ref: '#/components/schemas/StateKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - signature
                - timestamp
              properties:
                signature:
                  example: '0xd0bf2f6c2270874d8870a1081b67fcb0280b61db000778f159ba39c38fb2595639c2e1d81d085916ba6ec77f2bd4c4a2ae6dfbdbaf8703da7d9fe629b2e1218a00'
                  type: string
                  pattern: '^0x([0-9a-fA-F]+)$'
                  description: Signature of root state signed by relayer private key.
                timestamp:
                  example: '1733395652'
                  type: integer
                  format: int64
                  description: 'Time indicates when the event was caught, a.k.a state transition timestamp'
    StateKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - state
    StateV2:
      allOf:
        - $ref: '#/components/schemas/StateKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - signature
                - timestamp
              properties:
                signature:
                  example: '0xd0bf2f6c2270874d8870a1081b67fcb0280b61db000778f159ba39c38fb2595639c2e1d81d085916ba6ec77f2bd4c4a2ae6dfbdbaf8703da7d9fe629b2e1218a00'
                  type: string
                  pattern: '^0x([0-9a-fA-F]+)$'
                  description: 'Signature of root state signed by relayer private key, with the last byte of the signature set to 27/28.'
                timestamp:
                  example: '1733395652'
                  type: integer
                  format: int64
                  description: 'Time indicates when the event was caught, a.k.a state transition timestamp'
    StateV2Key:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - state_v2
    Tx:
      allOf:
        - $ref: '#/components/schemas/TxKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - tx_hash
              properties:
                tx_hash:
                  type: string
    TxKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - txs
    VoteCount:
      allOf:
        - $ref: '#/components/schemas/VoteCountKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - vote_count
              properties:
                vote_count:
                  type: integer
                  format: uint64
                  example: 0
    VoteCountAttributes:
      type: object
      properties:
        vote_count:
          type: integer
          format: uint64
          example: 0
    VoteCountKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          pattern: '^[0-9]+$'
          example: '333'
          description: ID of the voting to which the vote
        type:
          type: string
          enum:
            - vote_count
    VotingAvailability:
      allOf:
        - $ref: '#/components/schemas/VotingAvailabilityKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              $ref: '#/components/schemas/VotingAvailabilityAttributes'
    VotingAvailabilityAttributes:
      type: object
      properties:
        is_enough:
          type: boolean
          example: true
    VotingAvailabilityKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          pattern: '^[0-9]+$'
          example: '222'
          description: ID of the voting to which the vote
        type:
          type: string
          enum:
            - is_enough
    Options:
      type: object
      required:
        - title
        - variants
      properties:
        title:
          type: string
        variants:
          type: array
          items:
            type: string
    ParsedVotingWhiteData:
      type: object
      required:
        - selector
        - birth_date_lowerbound
        - birth_date_upper_bound
        - citizenship_whitelist
        - expiration_date_lower_bound
        - identity_counter_upper_bound
        - identity_creation_timestamp_upper_bound
        - min_age
        - max_age
        - sex
      properties:
        selector:
          type: string
          description: Proposal selector without first 0x
        sex:
          type: string
          description: 'toHex(''M'') // male, toHex(''F'') // female, 0 // any'
        birth_date_lowerbound:
          type: string
          description: birth_date_lowerbound in hex format without first 0x
        birth_date_upper_bound:
          type: string
          description: birth_date_upper_bound in hex format without first 0x
        expiration_date_lower_bound:
          type: string
          description: expiration_date_lower_bound in hex format without first 0x
        identity_counter_upper_bound:
          type: string
          description: uniqueness 0 | 1
        identity_creation_timestamp_upper_bound:
          type: string
        citizenship_whitelist:
          type: array
          items:
            type: string
            description: Citizenship string like "UKR".
          example:
            - UKR
            - TWN
          description: Citizenship whitelist for the voting
        min_age:
          type: integer
          format: int64
        max_age:
          type: integer
          format: int64
    VotingInfo:
      allOf:
        - $ref: '#/components/schemas/VotingInfoKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              $ref: '#/components/schemas/VotingInfoAttributes'
    VotingInfoAttributes:
      type: object
      required:
        - contract
        - author
        - metadata
      properties:
        contract:
          $ref: '#/components/schemas/VotingInfoContractInfo'
        author:
          type: string
          description: Address creator of the proposal
        metadata:
          $ref: '#/components/schemas/VotingInfoAttributesMetadata'
    VotingInfoAttributesMetadata:
      type: object
      description: Additional proposal data stored on IPFS
      required:
        - title
        - description
        - acceptedOptions
      properties:
        title:
          type: string
          description: Title of the proposal
        description:
          type: string
          description: Detailed description of the proposal
        acceptedOptions:
          type: array
          items:
            $ref: '#/components/schemas/Options'
    VotingInfoConfig:
      type: object
      description: Proposal info
      required:
        - start_timestamp
        - end_timestamp
        - proposal_id
        - description
        - multichoice
        - voting_whitelist
        - voting_whitelist_data
        - parsed_voting_whitelist_data
      properties:
        start_timestamp:
          type: integer
          format: int64
          description: Start time of the proposal
        end_timestamp:
          type: integer
          format: int64
          description: End time of the proposal
        proposal_id:
          type: integer
          format: int64
          description: Unique identifier of the proposal
        description:
          type: string
          description: Ipfs CID
        multichoice:
          type: integer
          format: int64
          description: Multichoice option for voting
        voting_whitelist:
          type: array
          items:
            type: string
            description: Address in the voting whitelist
          description: List of addresses allowed to vote
        voting_whitelist_data:
          type: array
          items:
            type: string
            format: byte
            description: Additional data for whitelisted voters
          description: Additional whitelist data in bytes
        parsed_voting_whitelist_data:
          type: array
          items:
            $ref: '#/components/schemas/ParsedVotingWhiteData'
    VotingInfoContractInfo:
      type: object
      required:
        - proposalSMT
        - status
        - config
        - voting_results
      properties:
        proposalSMT:
          type: string
          description: Address of the proposal SMT
        status:
          type: integer
          format: uint8
          description: Status of the proposal
        config:
          $ref: '#/components/schemas/VotingInfoConfig'
        voting_results:
          type: array
          items:
            type: array
            items:
              type: integer
              format: int64
            minItems: 8
            maxItems: 8
    VotingInfoKey:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - voting_info
    VotingPredict:
      allOf:
        - $ref: '#/components/schemas/VotingPredictKey'
        - type: object
          x-go-is-request: true
          required:
            - attributes
          properties:
            attributes:
              $ref: '#/components/schemas/VotingPredictAttributes'
    VotingPredictAttributes:
      type: object
      x-go-is-request: true
      properties:
        amount:
          type: string
          pattern: '^[0-9]+$'
          example: '10000'
          description: The amount of tokens available for covering transactions
        count_tx:
          type: string
          pattern: '^[0-9]+$'
          example: '10000'
          description: The number of transactions that need to be covered
        voting_id:
          type: integer
          format: int64
          example: 12
          description: ID of the voting to which the vote
    VotingPredictKey:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - vote_predict_amount
            - vote_predict_count_tx
    VotingPredictResp:
      allOf:
        - $ref: '#/components/schemas/VotingPredictRespKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              $ref: '#/components/schemas/VotingPredictRespAttributes'
    VotingPredictRespAttributes:
      type: object
      properties:
        count_tx_predict:
          type: string
          example: '10000'
        amount_predict:
          type: string
          example: '2000000'
    VotingPredictRespKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          pattern: '^[0-9]+:[0-9]+:\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$'
          example: '777:223231:2025-02-10T14:15:23Z'
          description: 'The ID consists of the proposal_id, the value as passed in the request (count_tx or amount), and the timestamp when the request was processed. These values are separated by '':''.'
        type:
          type: string
          enum:
            - vote_predict_amount
            - vote_predict_count_tx
          description: The type of response corresponds to the type of request
  parameters:
    citizenshipParam:
      in: query
      name: 'filter[citizenship]'
      required: false
      schema:
        type: string
        description: Citizenship string like "UKR".
    MaxAgeParam:
      in: query
      name: 'filter[max_age]'
      required: false
      schema:
        type: integer
        format: int64
        description: maximum age for proposal.
    MinAgeParam:
      in: query
      name: 'filter[min_age]'
      required: false
      schema:
        type: integer
        format: int64
        description: Minimal age for proposal.
    pageLimitParam:
      in: query
      name: 'page[limit]'
      required: false
      schema:
        type: integer
        default: 15
        description: Numbers of items per page to return.
    pageNumberParam:
      in: query
      name: 'page[number]'
      required: false
      schema:
        type: integer
      description: The number of a page to return.
    proposalCreatorParam:
      in: query
      name: 'filter[creator]'
      required: false
      schema:
        type: string
        description: Creator address.
    proposalIDParam:
      name: 'filter[proposal_id]'
      in: query
      required: false
      schema:
        type: integer
        format: int64
      description: Id for proposal
    sexParam:
      in: query
      name: 'filter[sex]'
      required: false
      schema:
        type: string
        description: 'Use ''M'' for male, ''F'' for female, or ''0'' for any'
    sortingParam:
      in: query
      name: 'page[order]'
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
        default: desc
        description: 'Order of records on the page. If sortingParam is not specified, order of records is by default sorted by ID.'
    votingIdParam:
      name: voting_id
      in: path
      required: true
      schema:
        type: string
        pattern: '^[0-9]+$'
      description: Id for which voting predictions are made
    votingStatus:
      in: query
      name: 'filter[status]'
      required: false
      schema:
        type: string
        description: Filter by proposal status.
        enum:
          - waiting
          - started
          - ended
