openapi: 3.0.0
info:
  version: 1.0.0
  title: proof-verification-relayer
  description: ''
servers:
  - url: 'https://api.demo.tokend.io'
    description: TokenD Developer Environment
paths:
  /integrations/proof-verification-relayer/v1/state:
    get:
      tags:
        - State
      summary: Get signed root state
      description: |
        Endpoint to get transited root state.    
        The service listens for the new `RootUpdated` event and fetches them. By request it might return any root by 
        its block number or root hex string if none of them provided last signed root returned.   
        Response contain signature of root signed by relayer private key.
      operationId: GetState
      parameters:
        - in: query
          name: 'filter[block]'
          required: false
          description: Block number to filter root by
          example: '666'
          schema:
            type: integer
            format: int64
        - in: query
          name: 'filter[root]'
          required: false
          description: Transited root in hex format stated to filter root by.
          example: '0x234693c352a217d95c3a0e2e7ea17a340ac1b2290e9ab573ef97c2a86b1a5a6e'
          schema:
            type: string
            pattern: '^0x([0-9a-fA-F]+)$'
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/State'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /integrations/proof-verification-relayer/v1/transit-state:
    post:
      tags:
        - State
      summary: Transit state
      operationId: TransitState
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - tx_data
                  properties:
                    tx_data:
                      type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Tx'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /integrations/proof-verification-relayer/v1/verify-proof:
    post:
      tags:
        - Proofs
      summary: The proof verification
      operationId: verify-proof
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - tx_data
                  properties:
                    tx_data:
                      type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Tx'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /integrations/proof-verification-relayer/v1/vote:
    post:
      tags:
        - Votes
      summary: The voting
      operationId: vote
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - tx_data
                    - voting
                    - registration
                  properties:
                    tx_data:
                      type: string
                    voting:
                      type: string
                    registration:
                      type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Tx'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /integrations/proof-verification-relayer/v2/is-enough:
    get:
      tags:
        - Voting
      summary: Retrieve the predicted voting availability for a given address
      operationId: checkVotingAvailability
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
            pattern: '^0x[0-9a-fA-F]{40}$'
          description: Address for which voting predictions are made
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/VotingAvailability'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /integrations/proof-verification-relayer/v2/predict:
    get:
      tags:
        - Voting
      summary: Get predicted number of votes for an address
      operationId: getVotePrediction
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
            pattern: '^0x[0-9a-fA-F]{40}$'
          description: Address for which voting predictions are made
      responses:
        '200':
          description: Success
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/VotePrediction'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
  /integrations/proof-verification-relayer/v2/vote:
    post:
      tags:
        - Voting
      summary: Voting
      operationId: vote
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/SendTx'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/TxKey'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
components:
  schemas:
    Errors:
      description: 'Standard JSON:API error'
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          description: Non empty array of errors occurred during request processing
          items:
            type: object
            required:
              - title
              - status
            properties:
              title:
                type: string
                description: 'Title is a short, human-readable summary of the problem'
                example: Bad Request
              detail:
                type: string
                description: Detail is a human-readable explanation specific to this occurrence of the problem
                example: Request body was expected
              status:
                type: integer
                description: Status is the HTTP status code applicable to this problem
                example: 400
                enum:
                  - 400
                  - 401
                  - 403
                  - 404
                  - 409
                  - 429
                  - 500
    SendTx:
      allOf:
        - $ref: '#/components/schemas/SendTxKey'
        - type: object
          x-go-is-request: true
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - tx_data
                - destination
                - proposal_id
              properties:
                tx_data:
                  type: string
                  pattern: '^0x[0-9a-fA-F]+$'
                  example: '0xdeadbeafdeadbeafdeadbeaf'
                  description: Serialized transaction data
                destination:
                  type: string
                  pattern: '^0x[0-9a-fA-F]{40}'
                  example: 0xdead...beaf
                  description: Address of the contract to which the transaction data should be sent
                proposal_id:
                  type: integer
                  format: int64
                  example: 34234
    SendTxKey:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - send_transaction
    State:
      allOf:
        - $ref: '#/components/schemas/StateKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - signature
                - timestamp
              properties:
                signature:
                  example: '0xd0bf2f6c2270874d8870a1081b67fcb0280b61db000778f159ba39c38fb2595639c2e1d81d085916ba6ec77f2bd4c4a2ae6dfbdbaf8703da7d9fe629b2e1218a00'
                  type: string
                  pattern: '^0x([0-9a-fA-F]+)$'
                  description: Signature of root state signed by relayer private key.
                timestamp:
                  example: '1733395652'
                  type: integer
                  format: int64
                  description: 'Time indicates when the event was caught, a.k.a state transition timestamp'
    StateKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - state
    Tx:
      allOf:
        - $ref: '#/components/schemas/TxKey'
        - type: object
          required:
            - attributes
          properties:
            attributes:
              type: object
              required:
                - tx_hash
              properties:
                tx_hash:
                  type: string
    TxKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - txs
    VotePrediction:
      x-go-is-request: true
      type: object
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
          pattern: '^0x[0-9a-fA-F]{40}'
          example: '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'
        type:
          type: string
          example: vote_count
        attributes:
          $ref: '#/components/schemas/VotePredictionAttributes'
    VotePredictionAttributes:
      type: object
      properties:
        vote_count:
          type: integer
          format: uint64
          example: 0
    VotingAvailability:
      x-go-is-request: true
      type: object
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
          pattern: '^0x[0-9a-fA-F]{40}'
          example: '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'
        type:
          type: string
          example: is_enough
        attributes:
          $ref: '#/components/schemas/VotingAvailabilityAttributes'
    VotingAvailabilityAttributes:
      type: object
      properties:
        is_enough:
          type: boolean
          example: true
  parameters:
    pageLimitParam:
      in: query
      name: 'page[limit]'
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 15
        description: Numbers of items per page to return.
    pageNumberParam:
      in: query
      name: 'page[number]'
      required: false
      schema:
        type: integer
      description: The number of a page to return.
    sortingParam:
      in: query
      name: 'page[order]'
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
        default: desc
        description: 'Order of records on the page. If sortingParam is not specified, order of records is by default sorted by ID.'
